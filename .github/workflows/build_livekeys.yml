name: Livekeys build matrix

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        include:
        - os: macos-latest
          NAME: macos
          TARGET: x86_64-apple-darwin
          COMPILER: clang
          LINKER: clang

    steps:
      - uses: actions/checkout@v1
        
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      
      - name: Download dependencies
        run: |
          brew tap live-keys/opencv
          brew update
          HOMEBREW_NO_AUTO_UPDATE=1 brew install openssl
          HOMEBREW_NO_AUTO_UPDATE=1 brew install wget
          wget --help
          HOMEBREW_NO_AUTO_UPDATE=1 brew install doxygen
          
      - name: Setup python and numpy
        run: |
          sudo mkdir /opt/qt
          sudo chmod 777 /opt/qt
          sudo ln -s /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild /Applications/Xcode.app/Contents/Developer/usr/bin/xcrun
          rm -r '/usr/local/lib/python2.7/site-packages/numpy' || true
          rm '/usr/local/bin/f2py' || true
          HOMEBREW_NO_AUTO_UPDATE=1 brew install numpy
          
      - name: Build OpenCV
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install --verbose live-keys/opencv/opencv
          echo "Open CV environment"
          ls /usr/local/Cellar
          echo "/usr/local/opt"
          ls /usr/local/opt
          ls /usr/local/opt/opencv/lib
          OPENCV_VERSION="$(ls -1 /usr/local/Cellar/opencv)"
          echo $OPENCV_VERSION
          export OPENCV_DIR=/usr/local/Cellar/opencv/$OPENCV_VERSION
          export PKG_CONFIG_PATH=$OPENCV_DIR/lib/pkgconfig
          echo $OPENCV_DIR
          echo $PKG_CONFIG_PATH
          echo $PWD
          echo "::set-env name=OPENCV_DIR::$OPENCV_DIR"
          echo "::set-env name=PKG_CONFIG_PATH::$PKG_CONFIG_PATH"
          
      - name: Setup Qt
        run: |          
          pip3 install aqtinstall
          aqt install 5.14.2 --outputdir /opt/qt mac desktop clang_64 -m qtwebengine qtquick3d
          aqt doc 5.14.2 --outputdir /opt/qt mac desktop -m qtwebengine
          export QTDIR=/opt/qt/5.14.2/clang_64
          echo "::set-env name=QTDIR::$QTDIR"
          
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
          
      - name: Setup Livepm
        run: |
          pip --version
          python --version
          python -m pip install --upgrade pip
          cd build
          wget https://github.com/livecv/live-pm/archive/master.zip
          unzip master.zip
          mv live-pm-master/* .
          git clone https://github.com/live-keys/live-doc.git
          cd live-doc
          npm install
          cd ..
          npm install --global create-dmg
          export LIVEDOC=$PWD/live-doc/live-doc.js
          echo "::set-env name=LIVEDOC::$LIVEDOC"
          pip install -r requirements.txt
          python livepm/main.py build .. macos_clang_64
          python livepm/main.py deploy .. macos_clang_64
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master'
        with:
          name: Release
          path: build/*.dmg
          
      - name: Upload Release
        if: ${{ steps.branch_name.outputs.SOURCE_TAG != '' }}
        run : |
          echo $SOURCE_NAME
          echo $SOURCE_BRANCH
          echo $SOURCE_TAG
        env:
          SOURCE_NAME: ${{ steps.branch_name.outputs.SOURCE_NAME }}
          SOURCE_BRANCH: ${{ steps.branch_name.outputs.SOURCE_BRANCH }}
          SOURCE_TAG: ${{ steps.branch_name.outputs.SOURCE_TAG }}
